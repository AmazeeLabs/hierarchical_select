<?php
// $Id$


//----------------------------------------------------------------------------
// Hierarchical Select hooks.

/**
 * Implementation of hook_hierarchical_select_form_alter().
 */
function hs_views_taxonomy_hierarchical_select_form_alter($form_id, &$form) {
  // Change the exposed filters of Views. Only affects hierarchical vocabulary
  // filters.
  if (in_array($form_id, array('views_filters', 'views_filterblock'))) {
    // Views will remove the form_id in views_filters_process(), but we need
    // it for Hierarchical Select to work, so put it back.
    $form['copy_of_form_id'] = $form['form_id'] + array('#parents' => array('form_id')); // TODO: only if at least one HS filter exists.

    // Find the ids and vocabulary ids of the exposed filters.
    $filters = array();
    foreach ($form['view']['#value']->exposed_filter as $id => $filter) {
      if (preg_match("/term_node_(\d+)\.tid/", $filter['field'], $matches)) {
        $vid = $matches[1];
        
        // Only apply Hierarchical Select if it's enabled for this vocabulary.
        if (variable_get("taxonomy_hierarchical_select_$vid", 0)) {
          $vocabulary = taxonomy_get_vocabulary($vid);
          $view = $form['view']['#value'];

          // Hierarchical Select only makes sense if there's a hierarchy.
          if ($vocabulary->hierarchy > 0) {
            // Make it use a hierarchical select.
            $form["filter$id"]['#type'] = 'hierarchical_select';
            $form["filter$id"]['#config'] = array(
              'module' => 'hs_views_taxonomy',
              'params' => array(
                'vid' => $vid,
              ),
              // When the **ALL** option is selected, nothing else should be.
              'exclusive_lineages' => array('**ALL**'),
              // This is a GET form, so also render the flat select.
              'render_flat_select' => 1,
            );
            taxonomy_hierarchical_select_update_form_item($form["filter$id"], $vid);
            
            // Inherit #config['dropbox']['status'] from the exposed filter
            // settings.
            $form["filter$id"]['#config']['dropbox']['status'] = !((bool) $view->exposed_filter[$id]['single']);
            
            // Inherit #required from the exposed filter settings.
            $form["filter$id"]['#required'] = !((bool) $view->exposed_filter[$id]['optional']);
          
            // Remove the dropbox limit.
            unset($form["filter$id"]['#config']['dropbox']['limit']);

            // Put the altered exposed filters in a separate table row.
            require_once(drupal_get_path('module', 'hierarchical_select') .'/includes/common.inc');
            hierarchical_select_common_views_exposed_filters_reposition();
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_hierarchical_select_params().
 */
function hs_views_taxonomy_hierarchical_select_params() {
  return taxonomy_hierarchical_select_params();
}

/**
 * Implementation of hook_hierarchical_select_root_level().
 */
function hs_views_taxonomy_hierarchical_select_root_level($params) {
  return array('**ALL**' => '<'. t('all') .'>') + taxonomy_hierarchical_select_root_level($params);
}

/**
 * Implementation of hook_hierarchical_select_children().
 */
function hs_views_taxonomy_hierarchical_select_children($parent, $params) {
  return ($parent == '**ALL**') ? array() : taxonomy_hierarchical_select_children($parent, $params);
}

/**
 * Implementation of hook_hierarchical_select_lineage().
 */
function hs_views_taxonomy_hierarchical_select_lineage($item, $params) {
  return ($item == '**ALL**') ? array($item) : taxonomy_hierarchical_select_lineage($item, $params);
}

/**
 * Implementation of hook_hierarchical_select_valid_item().
 */
function hs_views_taxonomy_hierarchical_select_valid_item($item, $params) {
  return ($item == '**ALL**' || taxonomy_hierarchical_select_valid_item($item, $params));
}

/**
 * Implementation of hook_hierarchical_select_item_get_label().
 */
function hs_views_taxonomy_hierarchical_select_item_get_label($item, $params) {
  return ($item == '**ALL**') ? '<'. t('all') .'>' : taxonomy_hierarchical_select_item_get_label($item, $params);
}


/**
 * Implementation of hook_hierarchical_select_create_item().
 */
// No implementation. This doesn't make sense for exposed filters: if you were
// able to create new items in the hierarchy, how could you then possibly find
// anything for that item?

/**
 * Implementation of hook_hierarchical_select_node_count().
 */
function hs_views_taxonomy_hierarchical_select_node_count($item, $params) {
  if ($item == '**ALL**') {
    return db_result(db_query('SELECT COUNT(DISTINCT(nid)) FROM {term_node}'));
  }
  else {
    return taxonomy_hierarchical_select_node_count($item, $params);
  }
}
