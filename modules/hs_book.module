<?php
// $Id$

//----------------------------------------------------------------------------
// Drupal core hooks.

/**
 * Implementation of hook_form_alter().
 */
function hs_book_form_alter($form_id, &$form) {
  if ($form_id == 'book_node_form') {
    unset($form['parent']['#options']);
    $form['parent']['#type'] = 'hierarchical_select';
    $form['parent']['#config'] = array(
      'module' => 'hs_book',
      'save_lineage'    => 0,
      'enforce_deepest' => 0,
    );
  }
}


//----------------------------------------------------------------------------
// Hierarchical Select hooks.

/**
 * Implementation of hook_hierarchical_select_params().
 */
function hs_book_hierarchical_select_params() {
  $params = array();
  return $params;
}

/**
 * Implementation of hook_hierarchical_select_root_level().
 */
function hs_book_hierarchical_select_root_level($params) {
  $root_level = array();

  // If the user has permission to create new books, add the top-level book page to the menu;
  if (user_access('create new books')) {
    $root_level[] = '<'. t('top-level') .'>';
  }
  $root_level += hs_book_hierarchical_select_children(0, $params);

  return $root_level;
}

/**
 * Implementation of hook_hierarchical_select_children().
 */
function hs_book_hierarchical_select_children($parent, $params) {
  $result = db_query(db_rewrite_sql('SELECT n.nid, n.title FROM {node} n INNER JOIN {book} b ON n.vid = b.vid WHERE n.status = 1 AND b.parent = %d ORDER BY b.weight, n.title'), $parent);

  $children = array();
  while ($node = db_fetch_object($result)) {
    $children[$node->nid] = $node->title;
  }

  return $children;
}

/**
 * Implementation of hook_hierarchical_select_lineage().
 */
function hs_book_hierarchical_select_lineage($item, $params) {
  $lineage = array($item);

  while (TRUE) {
    $parent = db_result(db_query("SELECT parent FROM {book} WHERE nid = %d", $item));

    // 0 is the root menu item, so if $parent == 0, the lineage is complete!
    if ($parent == 0)
      break;

    array_unshift($lineage, $parent);
    $item = $parent;
  }

  return $lineage;
}

/**
 * Implementation of hook_hierarchical_select_valid_item().
 */
function hs_book_hierarchical_select_valid_item($item, $params) {
  if (!is_numeric($item) || $item < 0) {
    return FALSE;
  }

  $count = db_result(db_query(db_rewrite_sql("SELECT COUNT(nid) FROM {book} WHERE nid = %d"), $item));
  return ($count == 1);
}

/**
 * Implementation of hook_hierarchical_select_item_get_label().
 */
function hs_book_hierarchical_select_item_get_label($item, $params) {
  static $labels = array();

  if (!isset($labels[$item])) {
    $labels[$item] = t(db_result(db_query("SELECT n.title FROM {book} b INNER JOIN {node} n ON b.vid = n.vid WHERE b.nid = %d", $item)));
  }

  return $labels[$item];
}

/**
 * Implementation of hook_hierarchical_select_implementation_info().
 */
function hs_book_hierarchical_select_implementation_info() {
  $info = node_get_types('type', 'book');
  return array(
    'hierarchy type' => t('Book'),
    'entity type'    => t('Node (!book_page)', array('!book_page' => $info->name)),
  );
}
