$Id$

Form API usage
--------------
You have to make sure your form item is using the "hierarchical_select" form
element type:

  $form['select_some_term'] = array(
    '#type' => 'hierarchical_select',
    '#title' => t('Select the tag you wish to use.'),
    '#size' => 1,
    '#config' => array(
      'module' => 'taxonomy',
      'params' => array(
        'vid' => $vid,
      ),
      'save_lineage'    => 0,
      'enforce_deepest' => 0,
      'level_labels' => array(
        'status' => 0,
        'labels' => array(
          0 => t('Main category'),
          1 => t('Subcategory'),
          2 => t('Third level category'),
        ),
      ),
      'dropbox' => array(
        'status'   => 0,
        'title'    => t('All selections'),
        'limit'    => 0,
        'reset_hs' => 1,
      ),
      'editability' => array(
        'status'           => 0,
        'item_types'       => array(),
        'allow_new_levels' => 0,
        'max_levels'       => 3,
      ),
      'animation_delay'    => 400,
      'exclusive_lineages' => array(),
      'render_flat_select' => 0,
    ),
    '#default_value' => '83',
  ); 

Now, let's explain what we see here:
1) We've set the #type property to "hierarchical_select" instead of "select".
2) The #size property is inherited by the selects of the hierarchical select.
3) There's a new property: #config. This must be an
array. These are the items it can contain:
 - module (obligated)
   This will be passed through in the AHAH requests, to let the HS module know
   which module's hooks should be used.

 - params (optional, may be necessary for some implementations)
   An array of parameters that will also be passed through in every AHAH
   request.
   e.g. In the case of taxonomy, this is the vocabulary id (vid). In case of
   content_taxonomy, there's two parameters: vid and the depth.

 - save_lineage (optional, defaults to 0)
   Triggers the lineage saving functionality.

 - enforce_deepest (optional, defaults to 0)
   Triggers the enforcing of a selection in the deepest level.

 - level_labels['status'] (optional, defaults to 0)
   Whether level labels should be enabled or not. When save_lineage is
   enabled, this will result in *empty* level labels.

 - level_labels['labels] (optional)
   An array of labels, one per level. The label for the first level should be
   the value of key 0.
   When enforce_deepest is set to:
   - 0, then you can provide n level labels, with n the number of levels
   - 1, then you can provide only one level label.   

 - dropbox['status'] (optional, defaults to 0)
   Whether the dropbox is enabled or not (the dropbox allows the user to make
   multiple selections).

 - dropbox['title'] (optional, defaults to "All selections:")
   The title of the dropbox. The dropbox is the area where all selected items
   are displayed when multiple select is enabled.

 - dropbox['limit'] (optional, defaults to 0, which means "no limit")
   Limit the number of items that can be added to the dropbox. So this allows
   you the restrict the number of items that can be selected when multiple
   select has been enabled.
   
 - dropbox['reset_hs'] (optional, defaults to 1, which means "do reset")
   Determines what will happen to the hierarchical select when the user has
   added a selection to the dropbox.

 - editability['status] (optional, defaults to 0)
   Allow the user to create new items in the hierarchy.

 - editability['item_types'] (optional, defaults to the empty array)
   Only meaningful when editable is set to TRUE.
   Set the item type for each level. E.g.: "country" for the first level,
   "region" for the second and "city" for the third. When the user then wants
   to create a new item, the default label for the new item will be of the
   form "new <item type>", e.g. "new region".

 - editability['allow_new_levels'] (optional, defaults to 0)
   Only meaningful when editable is set to TRUE.
   Allow the user to create new levels, i.e. when a certain item does not yet
   have children, the user can create a first child for it.

 - editability['max_levels'] (optional, defaults to 3)
   Only meaningful when editable_settings['allow_new_levels'] is set to TRUE.
   Limits the maximum number of levels. Don't set this too high or you'll end
   up with very deep hierarchies.

 - animation_delay (optional, defaults to 400)
   The delay of each animation (the drop in left and right animations), in ms.

 - exclusive_lineages (optional, defaults to the empty array)
   Sometimes, it's desirable to have exclusive lineages. When one of these
   lineages is selected, the user should not be able to select anything else.
   E.g. the **ALL** option in Views exposed filters.

 - render_flat_select (optional, defaults to 0)
   Because the hierarchical_select form element consists of multiple form
   items, it doesn't work well in GET forms. By enabling this setting, a flat
   select will also be rendered, that contains only the selected lineages.
   Combine that with Drupal.HierarchicalSelect.prepareGETSubmit in the JS code
   and you have a work-around for that (which, admittedly, only works when JS
   is enabled).
3) We *don't* specify a list of options: Hierarchical Select automatically
generates the options for us, thanks to the 'module' and 'params' settings.


Special values
--------------
- Ensure that your options don't have a "none", "all", "create_new_item" or
  "create_new_level" value, nor "label_\d+" values (the latter means "label_"
  followed by one or more digits). Your values should also not contain a pipe
  ("|"), since pipes are used to separate the selection of values that are
  sent back to the server in the callbacks.
- Valid 'empty' selections (i.e. if you want to set the #default_value
  property of your form item), are -1 and the empty array. The empty string is
  also considered valid, because Drupal core's Taxonomy module uses this as
  the empty selection.


Standardized configuration form
-------------------------------
Hierarchical Select 3 comes with a standardized configuration form: 
hierarchical_select_common_config_form(). This function accepts a lot of
parameters, which allows you to use names typical to your module's hierarchy
(e.g. 'leaf' instead of 'term' and 'tree' instead of 'vocabulary'). A submit
handler is also provided, of course.
An example:

  // I'm not configuring all parameters here. For an example of that, see one
  // of the included modules.
  $form['foobar_hierarchical_select_config'] = hierarchical_select_common_config_form($module, $params, $config_id, $defaults, $strings, $max_hierarchy_depth, $preview_is_required);
  
  // Add the the submit handler for the Hierarchical Select config form.
  $parents = array('foobar_hierarchical_select_config');
  $form['#submit']['hierarchical_select_common_config_form_submit'] = array($parents);


Configuration management
------------------------
It's now possible to export Hierarchical Select configurations, and there is a
function to set the configuration of a certain Hierarchical Select. Combine
the two and you can manage your Hierarchical Select configurations in code!
An example:

  // The exported configuration.
  $config = array( â€¦ );
  $config_id = $config['config_id];

  // Apply the configuration.
  require_once(drupal_get_path('module', 'hierarchical_select') .'/includes/common.inc');
  hierarchical_select_common_config_set($config_id, $config_id);


Hooks
-----
1) hook_hierarchial_select_form_alter($form_id, &$form);
   This hook is absolutely optional! The sole reason for its existence, is to
   allow easy altering of forms of modules that don't support Hierarchical
   Select natively, to use the hierarchical_select form element.

2) hook_hierarchical_select_params();
   Returns the names of all parameters that should be present.

3) hook_hierarchical_select_root_level($params);
   Returns the root level of the hierarchy.

4) hook_hierarchical_select_children($parent, $params);
   Gets the children of $parent and returns them.

5) hook_hierarchical_select_lineage($item, $params);
   Calculates the lineage of $item and returns it. Necessary when the
   "enforce_deepest" option is enabled.

6) hook_hierarchical_select_valid_item($item, $params);
   Validates an item, returns TRUE if valid, FALSE if invalid.

7) hook_hierarchical_select_item_get_label($item, $params);
   Given a valid item, returns the label.

8) hook_hierarchical_select_create_item($label, $parent, $params);
   Given a parent item and the label of a new item, create a new item as a
   child of the parent item.
   Optional hook. When this hook is not implemented, this functionality will
   never be used, even when you configure it that way.

9) hook_hierarchical_select_node_count($item, $params);
   Given a item, get the number of nodes that are related to the given item.
   Optional hook. When this hook is not implemented, this functionality will
   never be used, even when you configure it that way.

10) hook_hierarchical_select_config_info();
    Return metadata about each available user-editable configuration for this
    implementation. This information is used to generate the configurations
    overview page at admin/settings/hierarchical_select/configs. The expected
    format is:

      $config_info["$config_id|$content_type_name"] = array(
        'config_id'      => $config_id,
        'hierarchy type' => t('Content Taxonomy'),
        'hierarchy'      => t($vocabulary->name) ." ($field_name)",
        'entity type'    => t('node'),
        'entity'         => t($content_type['name']),
        'edit link'      => "admin/content/types/$content_type_name/fields/$field_name/hs_config",
      );

JavaScript events
-----------------
The Hierarchical Select module's JavaScript code triggers several events, to
allow for advanced interactions.

You can find all hierarchical_select form items using this selector:

  $('.hierarchical-select-wrapper');

You can find a *specific* hierarchical_select form item using this selector:

  $('#hierarchical-select-x-wrapper');

where x is a number, or more accurately: a hsid (hierarchical select id).
Retrieving all hsids in the current document can be done like this:

  for (var hsid in Drupal.settings.HierarchicalSelect.settings) {
    // â€¦
  }

The following events are triggered:
  - update hierarchical select
  - create new item
  - cancel new item
  - create new level
  - cancel new level
  - add to dropbox
  - remove from dropbox
  - enforced update
All events are triggered *after* the animations have completed.

However, it's often useful to do something *before* an event (especially
because all of the above events perform an AJAX request to the server). So,
the equivalent "before" events exist as well:
  - before update hierarchical select
  - before create new item
  - before cancel new item
  - before create new level
  - before cancel new level
  - before add to dropbox
  - before remove from dropbox
  - before enforced update
There is one exception: when the cache is enabled, the "before update
hierarchical select" event will not be triggered. This makes sense, because
updates from the cache are instantaneous.

An example of binding a function to the 'create new item' event of the second
(hsid == 1) hierarchical_select form item on the page:

  $('#hierarchical-select-1-wrapper')
  .bind('create new item', function() {
    // â€¦
  });

And finally, you can trigger a special event to enforce an update (this can be
useful when you have changed a hierarchy through another form item, or for
live previews, or â€¦).
Suppose you'd like to enforce an update of the first (hsid == 0)
hierarchical_select form item on the page:

  $('#hierarchical-select-0-wrapper')
  .trigger('enforce update');

The 'enforced update' (notice the past tense!) event is triggered upon
completion.
An even more rarely used special event can be triggered to prepare the
hierarchical_select form element for a get submit: the 'prepare GET submit'
event. To use this event, the 'render_flat_select' setting should be enabled
in the config.
