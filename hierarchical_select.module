<?php
// $Id$

/**
 * @file
 * This module defines the "hierarchical_select" form element, which is a
 * greatly enhanced way for letting the user select an option in a hierarchy.
 * Out of the box, this module supports the taxonomy and content_taxonomy
 * modules, but that automatically includes the forum module. It also converts
 * any hierarchical taxonomy exposed filters in any View to a hierarchical
 * select.
 *
 * Any module that uses a select form element, of which the options are
 * ordered hierarchically, can take advantage of this new form element.
 * Especially when there's a deep hierarchy, or when there are a lot of
 * options in each sublevel, this form element greatly simplifies the finding
 * of the right setting for the user. Note that due to the nature of this
 * custom form item, it's currently impossible to select nothing. So by
 * design, it is a required form item!
 */


// Enable default support for some modules, if they are enabled.
if (module_exists('taxonomy')) {
  require_once drupal_get_path('module', 'hierarchical_select') .'/modules/taxonomy.inc';
}
if (module_exists('content_taxonomy')) {
  require_once drupal_get_path('module', 'hierarchical_select') .'/modules/content_taxonomy.inc';
}


//----------------------------------------------------------------------------
// Drupal core hooks.

/**
 * Implementation of hook_menu().
 */
function hierarchical_select_menu($may_cache) {
  if (!$maycache) {
    $items[] = array(
      'path' => 'hierarchical_select_ahah',
      'callback' => 'hierarchical_select_ahah',
      'access' => TRUE, // TODO: Check if this safe.
      'type' => MENU_CALLBACK,
    );
  }
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function hierarchical_select_form_alter($form_id, &$form) {
  foreach (module_implements('hierarchical_select_form_alter') as $module) {
    $function = $module .'_hierarchical_select_form_alter';
    $function($form_id, $form);
  }
}

/**
 * Implementation of hook_elements().
 */
function hierarchical_select_elements() {
  $type['hierarchical_select'] = array(
    '#input' => TRUE, 
    '#process' => array('_hierarchical_select_process' => array()),
    '#hierarchical_select_settings' => array(),
    '#default_value' => -1,
  );
  return $type;
}


//----------------------------------------------------------------------------
// Menu callbacks.

/**
 * Menu callback; AHAH callback: generates the appropriate HTML.
 */
function hierarchical_select_ahah() {
  $params = $_POST;
  $required = (strcasecmp($params['required'], 'TRUE') == 0);
  unset(
    $params['module'],
    $params['hsid'],
    $params['selection'],
    $params['required']
  );
  
  print module_invoke($_POST['module'], 'hierarchical_select_render', $_POST['hsid'], $_POST['selection'], $params, $required);
  exit;
}


//----------------------------------------------------------------------------
// Public functions.

/**
 * Helper function to render the selects.
 *
 * @param $hsid
 *   The hierarchical select id.
 * @param $selects
 *   An array of options to be used in the selects, of this format:
 *   array(
 *     'value' => 'label',
 *     'value' => 'label',
 *     'selected' => 'value',
 *   );
 * @return
 *   The rendered HTML.
 */
function hierarchical_select_render_selects($hsid, $selects) {
  $output = '';

  for ($level = 0; $level < count($selects); $level++) {
    $output .= '<select id="hierarchical-select-'. $hsid .'-level-'. $level .'" class="form-select hierarchical-select hierarchical-select-'. $hsid .'-hierarchical-select">';
    foreach ($selects[$level]['options'] as $value => $label) {
      if ($value == $selects[$level]['selected']) {
        $output .= '<option selected="selected" value="'. $value .'">'. check_plain($label) .'</option>';
      }
      else {
        $output .= '<option value="'. $value .'">'. check_plain($label) .'</option>';
      }
    }
    $output .= '</select>';
  }

  return $output;
}


//----------------------------------------------------------------------------
// Private functions.

/**
 * Hierarchical select form element processing function.
 */
function _hierarchical_select_process($element) {
  static $hsid;

  // Render a hierarchical select as a normal select, it's the JavaScript that
  // will turn it into a hierarchical select.
  $element['#type'] = 'select';

  if (!isset($hsid)) {
    $hsid = 0;

    $url = base_path();
    $url .= variable_get('clean_url', 0) ? '' : '?q=';
    $url .= 'hierarchical_select_ahah';

    // Add the CSS and JS, set the URL that should be used by all hierarchical
    // selects.
    drupal_add_css(drupal_get_path('module', 'hierarchical_select') .'/hierarchical_select.css');
    jquery_interface_add();
    drupal_add_js(drupal_get_path('module', 'hierarchical_select') .'/hierarchical_select.js');
		drupal_add_js(array('hierarchical_select' => array('url' => $url)), 'setting');
  }
  else {
    $hsid++;
  }

  // Pass some settings for this hierarchical select.
  $module = $element['#hierarchical_select_settings']['module'];
  $params = $element['#hierarchical_select_settings']['params'];
  $lineage = $element['#hierarchical_select_settings']['lineage'];

  // When the #value property is empty, we're rendering this form (and thus
  // the form element) for the first time. When it's no longer empty, this
  // means that the validation failed and that we must keep the option that
  // was selected by the user.
  if (is_array($element['#value']) && empty($element['#value'])) {
    $selection = (is_array($element['#default_value'])) ? $element['#default_value'][0] : $element['#default_value'];
  }
  else {
    $selection = (is_array($element['#value'])) ? $element['#value'][0] : $element['#value'];
  }

	drupal_add_js(
	  array(
	    'hierarchical_select' => array(
	      'settings' => array(
  	      $hsid => array(
            'initial' => module_invoke($module, 'hierarchical_select_render', $hsid, $selection, $params, $element['#required']),
            'module' => $module,
            'required' => (bool) $element['#required'],
            'lineage' => (bool) $lineage,
  	        'params' => $params,
  	      ),
  	    ),
	    )
	  ),
	  'setting'
	);

  // If the lineage property is set to TRUE, make the select a multiple select.
  if ($lineage) {
    $element['#multiple'] = TRUE;
  }

  // Set the unique class.
  $element['#attributes']['class'] .= " hierarchical-select-$hsid hierarchical-select";

  return $element;
}

/**
 * Helper function that adds the JS to reposition the exposed filters of a
 * view just once.
 */
function _hierarchical_select_views_exposed_filters_reposition() {
  static $js_added;
  
  if (!isset($js_added)) {
    drupal_add_js(drupal_get_path('module', 'hierarchical_select') .'/modules/views.js', 'module');
  }
}